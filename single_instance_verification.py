import torch
import matplotlib.pyplot as plt
from torchvision import transforms
from PIL import Image
import numpy as np
import cv2
from UNet import *


def single_image_inference(image_pth, model_pth, device):
    model = UNet(in_channels=1, num_classes=1).to(device)
    model.load_state_dict(torch.load(model_pth, map_location=torch.device(device)))

    transform = transforms.Compose([
        # transforms.Resize((512, 512)),
        transforms.ToTensor()])

    img = transform(Image.open(image_pth).convert("L")).float().to(device)
    img = img.unsqueeze(0)

    pred_mask = model(img)

    img = img.squeeze(0).cpu().detach()
    img = img.permute(1, 2, 0)

    pred_mask = pred_mask.squeeze(0).cpu().detach()
    pred_mask = pred_mask.permute(1, 2, 0)
    pred_mask[pred_mask < 0]=0
    pred_mask[pred_mask > 0]=1

    fig, ax = plt.subplots(1,2)
    ax[0].imshow(img, cmap='gray')
    ax[0].set_title("Original Image")

    ax[1].imshow(pred_mask, cmap="gray")
    ax[1].set_title("Mask generated by Unet")

    plt.show()


if __name__ == "__main__":
    SINGLE_IMG_PATH = "/content/train/images/brisc2025_train_00028_gl_ax_t1.jpg"
    DATA_PATH = "./data"
    MODEL_PATH = "./unet.pth"

    device = "cuda" if torch.cuda.is_available() else "cpu"

    single_image_inference(SINGLE_IMG_PATH, MODEL_PATH, device)